{"name":"Pocketkid2.github.com","tagline":"My Github Page","body":"# Welcome to Adam's Tutorial Website\r\nI love programming. I do it a lot. I have discovered many cool tricks and tips and other useful things. I like sharing those with people. Here you will find those, as well as code snippets and step by steps that you may use for whatever you want!\r\n\r\n## Adam's guide to publishing a local project to GitHub with the basic files without trouble!\r\n\r\n#### Why I am explaining this\r\nI have had the problems before where I want to push a local repo to github, but all the extra files are tracked. I have to add a gitignore and then manually untrack them. That's not fun. If you do it the other way, where you make the repo on GitHub and then you add those files, you can't clone that repo into your existing project directory. So what do you do? It turns out there are some quick steps that I've found that let me fix all those problems in the least amount of time.\r\n\r\n#### Requirements\r\n* GitHub app (recommended)\r\n* Git and a terminal (On windows I use Git Bash, which comes with Git for windows)\r\n* An existing project folder (with code and all that jazz, I use my eclipse maven projects for this)\r\n* A GitHub account (duh)\r\n* A good text editor is recommended unless you know vi like a pro\r\n\r\n### Steps\r\n1. Open up git bash or terminal and `cd` into the directory of your project (for me it's something like `~/workspace/NAME`)\r\n2. Type `git init`\r\n3. Type `vi .gitignore`\r\n4. If you know vi, you can start putting in your gitignore. If you don't like vi like me, just type `:wq` and hit enter.\r\n5. Now open your text editor and navigate to your project folder and open the .gitignore\r\n6. Put in your .gitignore. There are some standard github gitignores if you search around, but for Java and Maven and Eclipse at the same time, I have combined some into a standardized gist [here](https://gist.github.com/Pocketkid2/18180a8bab52735716b3)\r\n7. Save the file, exit, and bring back up the Git Bash/terminal.\r\n8. Type `git add .`\r\n9. Now you can commit your files. I prefer using the github gui app to do the rest, but if you know git command line well you can do it either way. So if you decided to use github app, open it up.\r\n10. Find the plus button in the top left corner and make sure the Add tab is selected.\r\n11. Click the browse button and navigate to and select your project folder, then click Add Repository\r\n12. Make sure the uncommitted changes tab is up, and commit your changes using the GUI\r\n13. Click publish in the top right corner, and give your repo a description\r\n14. Your repo should now be on github! Find it on your profile page.\r\n15. It should say at the bottom asking you to create a readme, go ahead and do it.\r\n16. When you finished that, you can click the plus button next to the directory name to add a license.\r\n17. If you want a license, start typing LICENSE in the box and on the right it should say Do you want a template? And you can choose one of those options. I often use the MIT license.\r\n18. When you're done with that, you're done! I hope this tutorial helped you!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}